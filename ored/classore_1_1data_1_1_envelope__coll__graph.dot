digraph "Envelope"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [label="{Envelope\n||+ Envelope()\l+ Envelope()\l+ Envelope()\l+ Envelope()\l+ Envelope()\l+ Envelope()\l+ fromXML()\l+ toXML()\l+ counterparty()\l+ nettingSetId()\l+ nettingSetDetails()\l+ portfolioIds()\l+ additionalFields()\l+ fullAdditionalFields()\l+ additionalField()\l+ additionalAnyField()\l+ setAdditionalField()\l* initialized()\l* hasNettingSetDetails()\l* fromXML()\l* toXML()\l* counterparty()\l* nettingSetId()\l* nettingSetDetails()\l* portfolioIds()\l* additionalFields()\l* fullAdditionalFields()\l* additionalField()\l* additionalAnyField()\l* setAdditionalField()\l}",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Serializable object holding generic trade data, reporting dimensions."];
  Node2 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node2 [label="{XMLSerializable\n||+ ~XMLSerializable()\l+ fromXML()\l+ toXML()\l+ fromFile()\l+ toFile()\l+ fromXMLString()\l+ toXMLString()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classore_1_1data_1_1_x_m_l_serializable.html",tooltip="Base class for all serializable classes."];
  Node3 -> Node1 [color="grey25",style="solid",label=" -counterparty_" ,arrowhead="odiamond"];
  Node3 [label="{string\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node3 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node4 [label="{basic_string\< Char \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node1 [color="grey25",style="solid",label=" -nettingSetDetails_" ,arrowhead="odiamond"];
  Node5 [label="{NettingSetDetails\n||+ NettingSetDetails()\l+ NettingSetDetails()\l+ NettingSetDetails()\l+ fromXML()\l+ toXML()\l+ nettingSetId()\l+ agreementType()\l+ callType()\l+ initialMarginType()\l+ legalEntityId()\l* empty()\l* emptyOptionalFields()\l* mapRepresentation()\l* fieldNames()\l* optionalFieldNames()\l* fromXML()\l* toXML()\l* nettingSetId()\l* agreementType()\l* callType()\l* initialMarginType()\l* legalEntityId()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classore_1_1data_1_1_netting_set_details.html",tooltip="Serializable object holding netting set identification data."];
  Node2 -> Node5 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node3 -> Node5 [color="grey25",style="solid",label=" -agreementType_\n-callType_\n-initialMarginType\l_\n-legalEntityId\l_\n-nettingSetId_" ,arrowhead="odiamond"];
  Node6 -> Node1 [color="grey25",style="solid",label=" -portfolioIds_" ,arrowhead="odiamond"];
  Node6 [label="{set\< string \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node6 [color="grey25",style="solid",label=" +keys" ,arrowhead="odiamond"];
  Node7 -> Node6 [dir="back",color="orange",style="solid",label=" \< string \>" ];
  Node7 [label="{set\< K \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node7 [color="grey25",style="solid",label=" +keys" ,arrowhead="odiamond"];
  Node8 [label="{K\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node9 -> Node1 [color="grey25",style="solid",label=" -additionalFields_" ,arrowhead="odiamond"];
  Node9 [label="{map\< string, boost\l::any \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node9 [color="grey25",style="solid",label=" +keys" ,arrowhead="odiamond"];
  Node10 -> Node9 [color="grey25",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node10 [label="{any\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node11 -> Node9 [dir="back",color="orange",style="solid",label=" \< string, boost::any \>" ];
  Node11 [label="{map\< K, T \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node11 [color="grey25",style="solid",label=" +keys" ,arrowhead="odiamond"];
  Node12 -> Node11 [color="grey25",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node12 [label="{T\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node13 -> Node1 [color="grey25",style="solid",label=" -initialized_" ,arrowhead="odiamond"];
  Node13 [label="{bool\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classbool.html",tooltip=" "];
}
