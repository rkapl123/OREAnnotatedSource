digraph "CrossCcyBasisSwapConvention"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [label="{CrossCcyBasisSwapConvention\n||+ CrossCcyBasisSwapConvention()\l+ CrossCcyBasisSwapConvention()\l+ settlementDays()\l+ settlementCalendar()\l+ rollConvention()\l+ flatIndex()\l+ spreadIndex()\l+ flatIndexName()\l+ spreadIndexName()\l+ eom()\l+ isResettable()\l+ flatIndexIsResettable()\l+ flatTenor()\l+ spreadTenor()\l+ paymentLag()\l+ flatPaymentLag()\l+ includeSpread()\l+ lookback()\l+ fixingDays()\l+ rateCutoff()\l+ isAveraged()\l+ flatIncludeSpread()\l+ flatLookback()\l+ flatFixingDays()\l+ flatRateCutoff()\l+ flatIsAveraged()\l* settlementDays_\l* settlementCalendar_\l* rollConvention_\l* eom_\l* isResettable_\l* flatIndexIsResettable_\l* flatTenor_\l* spreadTenor_\l* paymentLag_\l* flatPaymentLag_\l* includeSpread_\l* lookback_\l* fixingDays_\l* rateCutoff_\l* isAveraged_\l* flatIncludeSpread_\l* flatLookback_\l* flatFixingDays_\l* flatRateCutoff_\l* flatIsAveraged_\land 25 more...\l* CrossCcyBasisSwapConvention()\l* CrossCcyBasisSwapConvention()\l* settlementDays()\l* settlementCalendar()\l* rollConvention()\l* flatIndex()\l* spreadIndex()\l* flatIndexName()\l* spreadIndexName()\l* eom()\l* isResettable()\l* flatIndexIsResettable()\l* flatTenor()\l* spreadTenor()\l* paymentLag()\l* flatPaymentLag()\l* includeSpread()\l* lookback()\l* fixingDays()\l* rateCutoff()\l* isAveraged()\l* flatIncludeSpread()\l* flatLookback()\l* flatFixingDays()\l* flatRateCutoff()\l* flatIsAveraged()\l}",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Container for storing Cross Currency Basis Swap quote conventions."];
  Node2 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node2 [label="{Convention\n||+ ~Convention()\l+ id()\l+ type()\l* type_\l* id_\l* build()\l* Convention()\l* Convention()\l* id()\l* type()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classore_1_1data_1_1_convention.html",tooltip="Abstract base class for convention objects."];
  Node3 -> Node2 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node3 [label="{XMLSerializable\n||+ ~XMLSerializable()\l+ fromXML()\l+ toXML()\l+ fromFile()\l+ toFile()\l+ fromXMLString()\l+ toXMLString()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classore_1_1data_1_1_x_m_l_serializable.html",tooltip="Base class for all serializable classes."];
}
