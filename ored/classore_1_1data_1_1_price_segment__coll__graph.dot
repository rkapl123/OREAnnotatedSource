digraph "PriceSegment"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [label="{PriceSegment\n||+ PriceSegment()\l+ PriceSegment()\l+ type()\l+ conventionsId()\l+ quotes()\l+ priority()\l+ offPeakDaily()\l+ peakPriceCurveId()\l+ peakPriceCalendar()\l+ empty()\l* fromXML()\l* toXML()\l* populateQuotes()\l* PriceSegment()\l* PriceSegment()\l* type()\l* conventionsId()\l* quotes()\l* priority()\l* offPeakDaily()\l* peakPriceCurveId()\l* peakPriceCalendar()\l* empty()\l}",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node2 [label="{XMLSerializable\n||+ ~XMLSerializable()\l+ fromXML()\l+ toXML()\l+ fromFile()\l+ toFile()\l+ fromXMLString()\l+ toXMLString()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classore_1_1data_1_1_x_m_l_serializable.html",tooltip="Base class for all serializable classes."];
  Node3 -> Node1 [color="grey25",style="solid",label=" -conventionsId_\n-peakPriceCalendar\l_\n-peakPriceCurveId\l_\n-strType_" ,arrowhead="odiamond"];
  Node3 [label="{string\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node3 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node4 [label="{basic_string\< Char \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node1 [color="grey25",style="solid",label=" -quotes_" ,arrowhead="odiamond"];
  Node5 [label="{vector\< std::string \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node5 [color="grey25",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node6 -> Node5 [dir="back",color="orange",style="solid",label=" \< std::string \>" ];
  Node6 [label="{vector\< T \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node6 [color="grey25",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node7 [label="{T\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node1 [color="grey25",style="solid",label=" -priority_" ,arrowhead="odiamond"];
  Node8 [label="{optional\< unsigned\l short \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node9 -> Node1 [color="grey25",style="solid",label=" -offPeakDaily_" ,arrowhead="odiamond"];
  Node9 [label="{optional\< ore::data\l::PriceSegment::OffPeakDaily \>\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node1 [color="grey25",style="solid",label=" -empty_" ,arrowhead="odiamond"];
  Node10 [label="{bool\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classbool.html",tooltip=" "];
  Node11 -> Node1 [color="grey25",style="solid",label=" -type_" ,arrowhead="odiamond"];
  Node11 [label="{Type\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
}
